<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="fr">
  <compounddef id="_u_s_a_r_t0_8ino" kind="file" language="C++">
    <compoundname>USART0.ino</compoundname>
    <sectiondef kind="define">
      <memberdef kind="define" id="_u_s_a_r_t0_8ino_1a5bf1d46877ac22d5e12d9b1c0432d373" prot="public" static="no">
        <name>FRAMING_ERROR</name>
        <initializer>(1&lt;&lt;FE0)</initializer>
        <briefdescription>
<para>Vérification de la bonne définition du BAUD. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="8" column="9" bodyfile="USART0.ino" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_u_s_a_r_t0_8ino_1a81d2ca6759f3f3bf04556b7558aea6bc" prot="public" static="no">
        <name>PARITY_ERROR</name>
        <initializer>(1&lt;&lt;UPE0)</initializer>
        <briefdescription>
<para>Définition d&apos;une possible erreur de parité </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="12" column="9" bodyfile="USART0.ino" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_u_s_a_r_t0_8ino_1a71b59e9e65a8625df1d0af2143664c52" prot="public" static="no">
        <name>DATA_OVERRUN</name>
        <initializer>(1&lt;&lt;DOR0)</initializer>
        <briefdescription>
<para>Erreur de data définit au-delà de l&apos;espace mémoire. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="16" column="9" bodyfile="USART0.ino" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_u_s_a_r_t0_8ino_1a802b2b582b121e4632aa9a491d503720" prot="public" static="no">
        <name>FOSC</name>
        <initializer>16000000</initializer>
        <briefdescription>
<para>Définition de la fréquence d&apos;oscillation à 16 MHz. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="20" column="9" bodyfile="USART0.ino" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_u_s_a_r_t0_8ino_1a62634036639f88eece6fbf226b45f84b" prot="public" static="no">
        <name>BAUD</name>
        <initializer>9600</initializer>
        <briefdescription>
<para>Définition de BAUD à 9600 pour le port série. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="24" column="9" bodyfile="USART0.ino" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_u_s_a_r_t0_8ino_1a711e9130c825a7269c8c87dbb57a85e0" prot="public" static="no">
        <name>MYUBRR</name>
        <initializer><ref refid="_u_s_a_r_t0_8ino_1a802b2b582b121e4632aa9a491d503720" kindref="member">FOSC</ref>/16/<ref refid="_u_s_a_r_t0_8ino_1a62634036639f88eece6fbf226b45f84b" kindref="member">BAUD</ref>-1</initializer>
        <briefdescription>
<para>Calcul pour le taux du port série. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="28" column="9" bodyfile="USART0.ino" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="_u_s_a_r_t0_8ino_1adf916204820072417ed73a32de1cefcf" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int flag</definition>
        <argsstring></argsstring>
        <name>flag</name>
        <initializer>=0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="29" column="5" bodyfile="USART0.ino" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_u_s_a_r_t0_8ino_1a0544c3fe466e421738dae463968b70ba" prot="public" static="no" mutable="no">
        <type></type>
        <definition>else</definition>
        <argsstring></argsstring>
        <name>else</name>
        <initializer>{UDR0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="93" column="5" bodyfile="USART0.ino" bodystart="94" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_u_s_a_r_t0_8ino_1a99f79737b2f8bf945b4c169c69e3e3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_Init</definition>
        <argsstring>(unsigned int ubrr)</argsstring>
        <name>USART_Init</name>
        <param>
          <type>unsigned int</type>
          <declname>ubrr</declname>
        </param>
        <briefdescription>
<para>Initialisation des variables pour pouvoir utiliser transmit and receive et avoir un bit de stop à 2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="34" column="6" bodyfile="USART0.ino" bodystart="34" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="_u_s_a_r_t0_8ino_1ab8c416106cf1aff4ccdb3da4860fc179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_Transmit</definition>
        <argsstring>(unsigned char data)</argsstring>
        <name>USART_Transmit</name>
        <param>
          <type>unsigned char</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Fonction transmit. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="47" column="6" bodyfile="USART0.ino" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="_u_s_a_r_t0_8ino_1ab6e9fd192b4aa0d1342af41edb7e8db6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_puts</definition>
        <argsstring>(unsigned char *str)</argsstring>
        <name>USART_puts</name>
        <param>
          <type>unsigned char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Fonction permettant de sauter une ligne. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="57" column="6" bodyfile="USART0.ino" bodystart="57" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="_u_s_a_r_t0_8ino_1a48435142a44158906915a0de70dcab5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char USART_Receive</definition>
        <argsstring>(void)</argsstring>
        <name>USART_Receive</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Fonction permettant de recevoir les caractères transmits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="75" column="15" bodyfile="USART0.ino" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="_u_s_a_r_t0_8ino_1a05e7738df4ed987e09baf5c97d834884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>if</definition>
        <argsstring>((status &amp;(FRAMING_ERROR|PARITY_ERROR|DATA_OVERRUN))==0)</argsstring>
        <name>if</name>
        <param>
          <type>(status &amp;(<ref refid="_u_s_a_r_t0_8ino_1a5bf1d46877ac22d5e12d9b1c0432d373" kindref="member">FRAMING_ERROR</ref>|<ref refid="_u_s_a_r_t0_8ino_1a81d2ca6759f3f3bf04556b7558aea6bc" kindref="member">PARITY_ERROR</ref>|<ref refid="_u_s_a_r_t0_8ino_1a71b59e9e65a8625df1d0af2143664c52" kindref="member">DATA_OVERRUN</ref>))</type>
          <defval>=0</defval>
        </param>
        <briefdescription>
<para>S&apos;il n&apos;y a aucune erreur on passe le flag à 1 sinon on affiche &quot;error&quot;. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable pour l&apos;interruption </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="90" column="1" bodyfile="USART0.ino" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="_u_s_a_r_t0_8ino_1a4fb05335500c4185447e5845fe9c5dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>USART_puts</definition>
        <argsstring>(&quot;error&quot;)</argsstring>
        <name>USART_puts</name>
        <param>
          <type>&quot;error&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="95" column="6" declfile="USART0.ino" declline="95" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_u_s_a_r_t0_8ino_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
<para>Utilisation de l&apos;interruption dans le main pour afficher le caractère suivant sinon ne rien afficher. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="USART0.ino" line="100" column="5" bodyfile="USART0.ino" bodystart="100" bodyend="112"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FRAMING_ERROR<sp/>(1&lt;&lt;FE0)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PARITY_ERROR<sp/>(1&lt;&lt;UPE0)</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATA_OVERRUN<sp/>(1&lt;&lt;DOR0)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FOSC<sp/>16000000<sp/></highlight><highlight class="comment">//<sp/>Clock<sp/>Speed</highlight></codeline>
<codeline lineno="24"><highlight class="normal">#define<sp/>BAUD<sp/>9600</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MYUBRR<sp/>FOSC/16/BAUD-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_u_s_a_r_t0_8ino_1adf916204820072417ed73a32de1cefcf" kindref="member">flag</ref>=0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_s_a_r_t0_8ino_1a99f79737b2f8bf945b4c169c69e3e3eb" kindref="member">USART_Init</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ubrr)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*Set<sp/>baud<sp/>rate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">UBRR0H<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(ubrr&gt;&gt;8);</highlight></codeline>
<codeline lineno="38"><highlight class="normal">UBRR0L<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)ubrr;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*Enable<sp/>receiver<sp/>and<sp/>transmitter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">UCSR0B<sp/>=<sp/>(1&lt;&lt;RXEN0)|(1&lt;&lt;TXEN0)|(1&lt;&lt;RXCIE0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>frame<sp/>format:<sp/>8data,<sp/>2stop<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal">UCSR0C<sp/>=<sp/>(1&lt;&lt;USBS0)|(1&lt;&lt;UCSZ00)|(1&lt;&lt;UCSZ01);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_s_a_r_t0_8ino_1ab8c416106cf1aff4ccdb3da4860fc179" kindref="member">USART_Transmit</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>empty<sp/>transmit<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(UCSR0A<sp/>&amp;<sp/>(1&lt;&lt;UDRE0)));</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Put<sp/>data<sp/>into<sp/>buffer,<sp/>sends<sp/>the<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">UDR0<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_u_s_a_r_t0_8ino_1ab6e9fd192b4aa0d1342af41edb7e8db6" kindref="member">USART_puts</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="_u_s_a_r_t0_8ino_1ab8c416106cf1aff4ccdb3da4860fc179" kindref="member">USART_Transmit</ref>(*str);}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*++str!=0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="65"><highlight class="comment">USART_putsln(unsigned<sp/>char<sp/>*str)</highlight></codeline>
<codeline lineno="66"><highlight class="comment">{</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>do</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>{USART_puts(str);</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>USART_Transmit(10);</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>USART_Transmit(13);}</highlight></codeline>
<codeline lineno="71"><highlight class="comment">}*/</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="_u_s_a_r_t0_8ino_1a48435142a44158906915a0de70dcab5c" kindref="member">USART_Receive</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>data<sp/>to<sp/>be<sp/>received<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!(UCSR0A<sp/>&amp;<sp/>(1&lt;&lt;RXC0)));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Get<sp/>and<sp/>return<sp/>received<sp/>data<sp/>from<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UDR0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">ISR(USART_RX_vect)<sp/></highlight><highlight class="comment">//<sp/>https://www.nongnu.org/avr-libc/user-manual/group__avr__interrupts.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>status=UCSR0A;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((status<sp/>&amp;<sp/>(<ref refid="_u_s_a_r_t0_8ino_1a5bf1d46877ac22d5e12d9b1c0432d373" kindref="member">FRAMING_ERROR</ref><sp/>|<sp/><ref refid="_u_s_a_r_t0_8ino_1a81d2ca6759f3f3bf04556b7558aea6bc" kindref="member">PARITY_ERROR</ref><sp/>|<sp/><ref refid="_u_s_a_r_t0_8ino_1a71b59e9e65a8625df1d0af2143664c52" kindref="member">DATA_OVERRUN</ref>))==0)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="_u_s_a_r_t0_8ino_1adf916204820072417ed73a32de1cefcf" kindref="member">flag</ref>=1;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{UDR0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="_u_s_a_r_t0_8ino_1ab6e9fd192b4aa0d1342af41edb7e8db6" kindref="member">USART_puts</ref>(</highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">);}</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_u_s_a_r_t0_8ino_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="_u_s_a_r_t0_8ino_1a99f79737b2f8bf945b4c169c69e3e3eb" kindref="member">USART_Init</ref>(<ref refid="_u_s_a_r_t0_8ino_1a711e9130c825a7269c8c87dbb57a85e0" kindref="member">MYUBRR</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">sei();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="_u_s_a_r_t0_8ino_1adf916204820072417ed73a32de1cefcf" kindref="member">flag</ref>)</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_s_a_r_t0_8ino_1ab8c416106cf1aff4ccdb3da4860fc179" kindref="member">USART_Transmit</ref>(UDR0+1);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_u_s_a_r_t0_8ino_1adf916204820072417ed73a32de1cefcf" kindref="member">flag</ref>=0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>_delay_ms(1);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="USART0.ino"/>
  </compounddef>
</doxygen>
